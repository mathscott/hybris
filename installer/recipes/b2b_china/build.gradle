def config = {
    localProperties {
        property 'baiduApiKey', ''
        property 'website.powertools.http', 'http://powertools.local:9001/yb2bacceleratorstorefront'
        property 'website.powertools.https', 'https://powertools.local:9002/yb2bacceleratorstorefront'
    }

    extensions {
        extName 'mcc'
        extName 'adaptivesearchsolr'
        extName 'adaptivesearchbackoffice'
        extName 'adaptivesearchwebservices'
        extName 'adaptivesearchsamplesaddon'
        extName 'b2bcommercebackoffice'
        extName 'solrfacetsearchbackoffice'

        extName 'yacceleratorcockpits'
        extName 'yacceleratorinitialdata'
        extName 'yacceleratorfulfilmentprocess'
        extName 'ycommercewebservices'
        extName 'ycommercewebservicestest'
        extName 'orderselfserviceaddon'

        extName 'powertoolsstore'
        extName 'solrserver'

        extName 'acceleratorwebservicesaddon'
        extName 'chineseaddressaddon'
        extName 'chinesecommerceorgaddressaddon'
        extName 'chineseaddressbackoffice'
        extName 'b2bacceleratoraddon'
        extName 'commerceorgaddon'
        extName 'commerceorgsamplesaddon'

        extName 'customersupportbackoffice'
        extName 'customerticketingaddon'

        extName 'rulebuilderbackoffice'
        extName 'couponbackoffice'
        extName 'droolsruleengineservices'
        extName 'couponfacades'
        extName 'promotionenginesamplesaddon'

        extName 'textfieldconfiguratortemplatebackoffice'
        extName 'textfieldconfiguratortemplateaddon'

        extName 'cmswebservices'
        extName 'smarteditwebservices'
        extName 'cmssmarteditwebservices'
        extName 'permissionswebservices'
        extName 'smarteditaddon'
        extName 'cmssmartedit'
		extName 'cmsbackoffice'
        extName 'assistedservicestorefront'
		extName 'assistedservicewebservices'

        extName 'previewpersonalizationweb'
        extName 'personalizationcmsweb'
        extName 'personalizationsmartedit'
        extName 'personalizationpromotionssmartedit'
        extName 'personalizationsampledataaddon'
        extName 'personalizationpromotions'
        extName 'personalizationpromotionsweb'
        extName 'personalizationservicesbackoffice'
        extName 'personalizationpromotionsbackoffice'
        extName 'personalizationcmsbackoffice'
        extName 'personalizationsearchbackoffice'
        extName 'personalizationsearchsmartedit'
        extName 'personalizationsearchweb'
        extName 'personalizationsearchsamplesaddon'

        extName 'assistedserviceatddtests'
        extName 'promotionengineatddtests'
        extName 'textfieldconfiguratortemplateatddtests'
        extName 'chinesestoreaddon'

		extName 'consignmenttrackingaddon'
        extName 'consignmenttrackingmock'
        extName 'consignmenttrackingbackoffice'
        extName 'consignmenttrackingoccaddon'

    }
}

task setup << {
    apply plugin: 'installer-platform-plugin'
    apply plugin: 'installer-addon-plugin'
    def pl = platform(config)
    pl.setup()

    pl.executeAntTarget 'extgen -Dhybris.target=extgen -Dinput.template=yacceleratorstorefront -Dinput.name=yb2bacceleratorstorefront -Dinput.package=de.hybris.platform.yb2bacceleratorstorefront'

    pl.extensions {
        extName 'yb2bacceleratorstorefront'
    }
    pl.setup()

    pl.project.addons {
        names "chineseaddressaddon,chinesecommerceorgaddressaddon,b2bacceleratoraddon,commerceorgaddon,chinesestoreaddon,commerceorgsamplesaddon,promotionenginesamplesaddon,textfieldconfiguratortemplateaddon,smarteditaddon,assistedservicestorefront,customerticketingaddon,orderselfserviceaddon,consignmenttrackingaddon,adaptivesearchsamplesaddon,personalizationsearchsamplesaddon"
        template "yacceleratorstorefront"
        storeFronts "yb2bacceleratorstorefront"
        platform pl
    }

    pl.project.addons {
        names "acceleratorwebservicesaddon,consignmenttrackingoccaddon"
        template "ycommercewebservices"
        storeFronts "ycommercewebservices"
        platform pl
    }
}

task initialize << {
    apply plugin: 'installer-platform-plugin'
    def pl = platform(config)
    pl.build()
    pl.initialize()
}


task start << {
    apply plugin: 'installer-platform-plugin'
    def pl = platform(config)
    pl.start()
}
